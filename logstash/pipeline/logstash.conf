input {
  # File input - Go app log dosyalarını oku
  file {
    path => "/var/log/app/*.log"
    type => "go-app-logs"
    start_position => "beginning"
    codec => json
  }
  
  # TCP input - Go app'ten direkt gönderilen loglar
  tcp {
    port => 5000
    type => "go-app-tcp"
    codec => json
  }
  
  # UDP input - Go app'ten direkt gönderilen loglar
  udp {
    port => 5001
    type => "go-app-udp"
    codec => json
  }
}

filter {
  if [type] == "go-app-logs" or [type] == "go-app-tcp" or [type] == "go-app-udp" {
    # Timestamp'i parse et
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Log level'i normalize et
    if [level] {
      mutate {
        rename => { "level" => "log_level" }
      }
    }
    
    # Service name ekle
    mutate {
      add_field => { "service" => "user-service" }
      add_field => { "environment" => "development" }
    }
    
    # Request ID varsa ekle
    if [request_id] {
      mutate {
        add_field => { "trace_id" => "%{request_id}" }
      }
    }
    
    # Performance metrics
    if [response_time] {
      mutate {
        add_field => { "duration_ms" => "%{response_time}" }
      }
    }
    
    # Error handling
    if [log_level] == "ERROR" or [log_level] == "FATAL" {
      mutate {
        add_field => { "is_error" => true }
      }
    }
    
    # Business metrics
    if [user_id] {
      mutate {
        add_field => { "business_user_id" => "%{user_id}" }
      }
    }
    
    # IP address geolocation (opsiyonel)
    if [client_ip] and [client_ip] != "::1" and [client_ip] != "127.0.0.1" {
      geoip {
        source => "client_ip"
        target => "geoip"
      }
    }
  }
}

output {
  # Elasticsearch'e gönder
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "go-app-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"
  }
  
  # Console'a da yaz (debug için)
  stdout {
    codec => rubydebug
  }
}
